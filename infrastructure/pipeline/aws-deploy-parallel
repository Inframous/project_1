def gitCheckout() {
    checkout([
    $class: 'GitSCM',
    branches: [[name: 'main']],
    userRemoteConfigs : [[
        url: "${GIT_REPO_URL_SSH}",
        credentialsId: "${GIT_SSH_CREDENTIALS}"
        ]]
    ])
}
def appDeploy() {
    script {
        try { 
            sh """
                sudo docker stop my-app-deployed
                sudo docker rm -f my-app-deployed
                sudo docker image rm my-app
            """
        } catch (err) { // Just incase it is the first run, catching the error or any others that might happen.
            echo "There might have been an error stopping/removing the container/image..."
            echo "If this is the first time running this job, you may ignore this."
        } finally {
            echo "Done with cleanup, deploying app..."
        }
        // Building and deploying the app in the Production Server.
    
            // Not sure if I should clone the repo and if I should 'cd projec_1 or not'
        sh """
            sudo docker build -t my-app .
            sudo docker run -d -p 80:80 --restart always --name my-app-deployed my-app
        """
    }
}
def addItemDynamo() {
    // Adding the test results of the previous job to the DynamoDB created:
    // Downloading the csv from the bucket,
    // extracting and parsing the latest resulst, 
    // uploading the parsed data to an item within the DynamoDB table,
    // deleting the csv file.
    withAWS(credentials: 'aws-Jenkins-Controller', region: 'eu-central-1') {
        sh '''
            wget https://"${AWS_BUCKET_NAME}".s3.eu-central-1.amazonaws.com/report.csv
            input=\$(tail -n 1 report.csv) 
            TestId="\$((\$(wc report.csv -l | awk '{ print \$1 }') - 1))"
            TestUser="\$(echo \$input | cut -d ',' -f1 | sed 's/ /-/g')"
            TestDate="\$(echo \$input | cut -d ',' -f2 )"
            TestResult="\$(echo \$input | cut -d ',' -f3 )"

            echo \$TestID \$TestUser \$TestDate \$TestResults

            aws dynamodb put-item \
            --table-name TestTable \
            --item \
            '{"TestId": {"S": "'\$TestId'"}, "TestDate": {"S": "'\$TestDate'"}, "TestResult": {"S": "'\$TestResult'"}, "TestUser": {"S": "'\$TestUser'"}}' \
            --return-consumed-capacity TOTAL
            rm report.csv
        '''
    }
}

pipeline {
    agent none
    environment {
        AWS_CREDENTIALS = 'aws-Jenkins-Controller' // << aws credentials
        AWS_REGION = "eu-central-1" 
        AWS_BUCKET_NAME = "sq-proj1-bucket"
        
        GIT_SSH_CREDENTIALS = 'ssh-GitHub' // <<--- Git SSH Credentials.
        GIT_REPO_URL_HTTPS = "https://github.com/Inframous/project_1.git" 
        GIT_REPO_URL_SSH = "git@github.com:Inframous/project_1.git"
    }
    parameters {
        choice(name: 'KEY', choices: ['ONE', 'TWO', 'BOTH'], description: 'Select which agent(s) to run on', defaultValue:'BOTH')
    }
    stages {
        stage('Input Key') {
            when {
                expression { params.KEY == null }
            }
            steps {
                input message: 'Please select KEY value', parameters: [choice(name: 'KEY', choices: ['ONE', 'TWO', 'BOTH'], description: 'Select which agent(s) to run on')]
            }
        }
        stage('Run on Prod1') {
            when {
                expression { params.KEY == 'ONE' || params.KEY == 'BOTH' }
            }
            agent {
                label 'Prod1'
            }
            steps {
                gitCheckout()
                appDeploy()
            }
        }
        stage('Run on Prod2') {
            when {
                expression { params.KEY == 'TWO' || params.KEY == 'BOTH' }
            }
            agent {
                label 'Prod2'
            }
            steps {
                gitCheckout()
                appDeploy()
            }
        }
        // stage('Run on both agents in parallel') {
        //     when {
        //         expression { params.KEY == 'BOTH' }
        //     }
        //     parallel {
        //         stage('Prod1') {
        //             agent {
        //                 label 'Prod1'
        //             }
        //             steps {
        //                 gitCheckout()
        //                 appDeploy()
        //             }
        //         }
        //         stage('Prod2') {
        //             agent {
        //                 label 'Prod2'
        //             }
        //             steps {
        //                 gitCheckout()
        //                 appDeploy()
        //             }
        //         }
        //     }
        // }
        stage('Add item to DynamoDB') {
            // This will run only on Prod1
            agent {
                label 'Prod1'
            }
            steps {
                addItemDynamo()
            }
        }
    }
}
